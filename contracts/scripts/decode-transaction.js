const { ethers } = require('ethers');

async function decodeTransaction() {
  // Your transaction data
  const txData = "0x06651554000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000008200000000000000000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000009d263a138895d00000000000000000000000000000000000000000000000000000000000000077875e00100f5e7010075ef0100f5f6010075fe0100f5050200750d0200f4140200741c0200f4230200742b0200e2320200e3320200e4320200e5320200e6320200f4320200623a0200673a0200683a0200693a02006a3a02006b3a02006c3a02006d3a02006e3a02006f3a0200703a0200713a0200723a0200733a0200743a0200753a0200763a0200773a0200783a0200793a02007a3a02007b3a02007c3a02007d3a02007e3a02007f3a0200803a0200813a0200823a0200833a0200843a0200853a0200863a0200873a0200883a0200893a02008a3a02008b3a02008c3a02008d3a02008e3a02008f3a0200903a0200913a0200923a0200933a0200943a0200953a0200963a0200973a0200983a0200993a02009a3a02009b3a02009c3a02009d3a02009e3a02009f3a0200a03a0200a13a0200a23a0200a33a0200a43a0200a53a0200a63a0200a73a0200a83a0200a93a0200aa3a0200ab3a0200ac3a0200ad3a0200ae3a0200af3a0200b03a0200b13a0200b23a0200b33a0200b43a0200b53a0200b63a0200b73a0200b83a0200b93a0200ba3a0200bb3a0200bc3a0200bd3a0200be3a0200bf3a0200c03a0200c13a0200c23a0200c33a0200c43a0200c53a0200c63a0200c73a0200c83a0200c93a0200ca3a0200cb3a0200cc3a0200cd3a0200ce3a0200cf3a0200d03a0200d13a0200d23a0200d33a0200d43a0200d53a0200d63a0200d73a0200d83a0200d93a0200da3a0200db3a0200dc3a0200e2410200f44102005d4202005e4202006249020074490200df490200e0490200e1490200e2490200e3490200e4490200e5490200e6490200e7490200e8490200e9490200ea490200eb490200ec490200ed490200ee490200ef490200f0490200f1490200f2490200f3490200e2500200f45002007451020075510200765102007751020078510200795102007a5102007b5102007c5102006258020074580200fd580200fe580200ff580200005902000159020002590200035902000459020005590200065902000759020008590200095902000a5902000b5902000c5902000d5902000e5902000f590200105902001159020012590200135902001459020015590200e25f0200f45f0200966002009760020098600200996002009a6002009b6002009c6002009d60020062670200746702001e6802001f6802002068020021680200226802002368020024680200e26e0200f46e0200a56f0200a66f0200a76f0200a86f02007476020028770200297702002a7702002b770200f47d0200ac7e0200ad7e0200ae7e0200af7e0200748502002f860200f48c0200af8d0200749402002f950200f39b0200ae9c020073a302002ea40200f3aa0200adab020073b202002db30200f3b90200adba020073c102002dc20200f3c80200adc9020073d002002dd10200f3d70200add8020073df02002ce00200f3e60200ace7020073ee02002bef0200f3f50200abf6020073fd02002afe0200f3040300aa050300730c0300290d0300f3130300a9140300731b0300291c0300f3220300a8230300722a0300282b0300f2310300a832030071390300283a0300f1400300a741030071480300994803009a4803009b4803009c4803009d4803009e4803009f480300a0480300a1480300a2480300a3480300a4480300a5480300a6480300a7480300a8480300a9480300aa480300ab480300ac480300ad480300ae480300af480300b0480300b1480300b2480300b3480300b4480300b5480300b6480300b7480300b8480300b9480300ba480300bb480300bc480300bd480300be480300bf480300c0480300c1480300c2480300c3480300c4480300c5480300c6480300c7480300c8480300c9480300ca480300cb480300cc480300cd480300ce480300cf480300d0480300d1480300d2480300d3480300d4480300d5480300d6480300d7480300d8480300d948030027490300f14f03001350030014500300155003001650030017500300185003005a5003005b5003005c5003005d5003005e5003005f500300605003006150030062500300635003006450030065500300665003006750030068500300695003006a5003006b5003006c5003006d500300a6500300715703008d5703008e5703008f570300905703009157030092570300ee570300ef570300f0570300f1570300f2570300f3570300f4570300f5570300f6570300f7570300f8570300f9570300fa570300fb570300fc570300fd570300fe570300ff570300005803000158030002580300035803000458030005580300065803000758030008580300095803000a5803000b5803000c5803000d5803000e5803000f580300105803001158030012580300135803001458030015580300165803001758030018580300195803001a5803001b5803001c5803001d5803001e5803001f58030020580300215803002258030023580300245803002558030026580300f15e03000a5f03000b5f03000c5f0300716603008566030086660300876603008866030089660300f16d0300036e0300046e03007175030072750300737503007475030075750300767503007775030078750300797503007a7503007b7503007c7503007d7503007e7503007f7503008075030081750300827503000000000000000000000000000000000000000000000000000000000000000000000000000000059a04ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff0004ff00000000000000000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
  
  console.log('üîç Decoding your transaction data...\n');
  
  // Remove function selector (first 4 bytes)
  const dataWithoutSelector = "0x" + txData.slice(10);
  
  try {
    // Decode the parameters
    const decoded = ethers.AbiCoder.defaultAbiCoder().decode(
      ['bytes', 'bytes', 'bytes', 'uint256'],
      dataWithoutSelector
    );
    
    const [idsLE, colors24, teamBits, maxTotal] = decoded;
    
    console.log('üìä Transaction Parameters:');
    console.log(`   IDs Length: ${idsLE.length} bytes`);
    console.log(`   Colors Length: ${colors24.length} bytes`);
    console.log(`   Team Bits Length: ${teamBits.length} bytes`);
    console.log(`   Max Total: ${ethers.formatEther(maxTotal)} ETH`);
    
    // Calculate number of pixels
    const numPixels = (idsLE.length - 2) / 8; // Remove 0x and divide by 8 (4 bytes per pixel * 2 hex chars per byte)
    console.log(`\nüéØ Number of pixels: ${numPixels}`);
    
    console.log(`\n‚ùå ERROR DIAGNOSIS:`);
    console.log(`   Your transaction: ${numPixels} pixels`);
    console.log(`   Error received: BatchTooLarge()`);
    console.log(`   This means: maxBatch < ${numPixels}`);
    
    console.log(`\nüí° SOLUTIONS:`);
    console.log(`   1. Update contract maxBatch to 900 (recommended)`);
    console.log(`   2. Split into smaller batches`);
    console.log(`   3. Reduce to fewer pixels`);
    
  } catch (error) {
    console.error('‚ùå Error decoding:', error.message);
  }
}

decodeTransaction();
